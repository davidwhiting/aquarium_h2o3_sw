{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "CloudFormation",

  "Resources": {
    "AquariumEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {

        "ImageId": "AQUARIUM_IMAGE_ID",

        "KeyName": "AQUARIUM_KEY_NAME",

        "NetworkInterfaces": [
        {
          "SubnetId": "AQUARIUM_SUBNET_ID",
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "GroupSet": [ "AQUARIUM_GROUP_SET" ],
        }],

        "InstanceType": "AQUARIUM_INSTANCE_TYPE",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash\n",

              "# This script runs on instance boot and checks to make sure the instance has started properly",
              "# before handing it off to a qwiklab student.",
              "#",
              "# For every 100 or so instances that are started, a handful don't start properly for whatever",
              "# reason.  This piece of code makes sure the bad ones die off and never make it to a student.",
              "#",
              "# In the code below, a loop is checking that the Jupyter notebook started properly.",
              "# The 302 Found HTTP response indicates a proper start.",
              "# Once it starts properly, the cfn-signal command run from inside the instance tells the",
              "# cloudformation stack manager the instance is ready.",
              "# The CreationPolicy immediately below with a ResourceSignal timeout of 15 minutes waits for",
              "# the cfn-signal, and the instance will die off after 15 minutes if no signal arrives.",
              "# ",
              "# If all of the above happens successfully, then the lab is available to be claimed by a",
              "# student in qwiklab.",

              "set -x\n",

              "SUCCESS=0\n",

              "for (( i = 0; i < 3600; i++ ))\n",
              "do\n",
              "  /bin/echo ITERATION ${i} >> /tmp/userdata_iteration\n",
              "  rm -f /tmp/curl.out\n",
              "  curl -v http://localhost:8888/jupyter >& /tmp/curl.out\n",
              "  if [ $? -ne 0 ]; then\n",
              "    sleep 1\n",
              "    continue\n",
              "  fi\n",

              "  grep 'HTTP/1.1 302 Found' /tmp/curl.out > /dev/null\n",
              "  if [ $? -ne 0 ]; then\n",
              "  sleep 1\n",
              "    continue\n",
              "  fi\n",

              "  rm -f /tmp/curl.out\n",
              "  SUCCESS=1\n",
              "  break\n",
              "done\n",

              "if [ ${SUCCESS} -ne 1 ]; then\n",
              "  /bin/echo FAILED >> /tmp/userdata_failed\n",
              "  exit 1\n",
              "fi\n",

              "/bin/echo SUCCEDED >> /tmp/userdata_succeeded\n",
              "\n",
              "if [ ! -f /usr/local/bin/cfn-signal ]; then\n",
              "  mkdir -p /tmp/aws-cfn-bootstrap-latest\n",
              "  curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.4-8.tar.gz | tar xz -C /tmp/aws-cfn-bootstrap-latest --strip-components 1\n",
              "  apt-get update\n",
              "  apt-get install -y python-pip\n",
              "  pip install --upgrade /tmp/aws-cfn-bootstrap-latest\n",
              "fi \n",
              "\n",
              "/usr/local/bin/cfn-signal --exit-code 0",
              "                          --stack ", { "Ref" : "AWS::StackName" },
              "                          --resource AquariumEC2Instance",
              "                          --region ", { "Ref" : "AWS::Region" }, "\n",

              "/bin/echo userdata_end > /tmp/userdata_end\n"
            ]]
          }
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    }
  },

  "Outputs": {
    "Jupyter": {
      "Description": "Jupyter URL",
      "Value": { "Fn::Join": [ "", ["http://", { "Fn::GetAtt": ["AquariumEC2Instance", "PublicDnsName"] }, "/jupyter/" ]]}
    },
     "H2O": {
      "Description": "H2O Flow URL",
      "Value": { "Fn::Join": [ "", ["http://", { "Fn::GetAtt": ["AquariumEC2Instance", "PublicDnsName"] }, "/h2o/" ]]}
    }
  }
}